{"version":3,"sources":["components/Wrapper/index.js","components/Card/index.js","components/Navbar/index.js","App.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","Card","alt","name","src","image","onClick","clickedChars","id","Navbar","title","msg","score","highScore","maxScore","friends","length","App","state","currentScore","clickedChar","currentMsg","_this","includes","setState","resetGame","clicked","push","shuffleCards","shuffledCards","shuffleArray","i","j","Math","floor","random","_ref","_this2","this","components_Navbar","components_Wrapper","map","friend","components_Card","key","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"kgFAOeA,MAJf,SAAiBC,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMK,iBCYxBC,MAbjB,SAAcN,GACV,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKI,IAAKP,EAAMQ,KAAMC,IAAKT,EAAMU,MAC7BC,QAAS,kBAAMX,EAAMY,aAAaZ,EAAMa,UCIvCC,SATA,SAAAd,GAAK,OAEhBC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,YAAOH,EAAMe,OACbd,EAAAC,EAAAC,cAAA,YAAOH,EAAMgB,KACbf,EAAAC,EAAAC,cAAA,qBAAaH,EAAMiB,MAAnB,iBAAwCjB,EAAMkB,qBCAhDC,EAAWC,EAAQC,OA+FVC,6MA3FbC,MAAQ,CACNH,UACAF,UAAW,EACXM,aAAc,EACdC,YAAa,GACbC,WAAY,sCAGdd,aAAe,SAAAC,GACb,GAAIc,EAAKJ,MAAME,YAAYG,SAASf,GAClCc,EAAKE,SAAS,CAACH,WAAW,wBAC1BC,EAAKG,gBAGF,CACH,IAAMb,EAAQU,EAAKJ,MAAMC,aAAe,EAEpCP,EAAQU,EAAKJ,MAAML,WACrBS,EAAKE,SAAS,CAACX,UAAUD,IAGvBA,IAAUE,GACZQ,EAAKE,SAAS,CAACH,WAAY,eAC3BC,EAAKG,cAILH,EAAKE,SAAS,CAACH,WAAY,mBAC3BC,EAAKE,SAAS,CAACE,QAAQJ,EAAKJ,MAAME,YAAYO,KAAKnB,KACnDc,EAAKE,SAAS,CAACL,aAAaP,IAC5BU,EAAKM,oBAaXA,aAAe,WACb,IAAMC,EAAgBP,EAAKQ,aAAaf,GACxCO,EAAKE,SAAS,CAACT,QAAQc,OAGzBC,aAAe,SAACjC,GACd,IAAK,IAAIkC,EAAIlC,EAAEmB,OAAS,EAAGe,EAAI,EAAGA,IAAK,CACnC,IAAMC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IADPK,EAEpB,CAACvC,EAAEmC,GAAInC,EAAEkC,IAAvBlC,EAAEkC,GAFgCK,EAAA,GAE5BvC,EAAEmC,GAF0BI,EAAA,GAIvC,OAAOvC,KAGT4B,UAAY,WACVH,EAAKE,SAAS,CAACL,aAAa,IAC5BG,EAAKE,SAAS,CAACJ,YAAY,KAC3BE,EAAKM,wFAIE,IAAAS,EAAAC,KACP,OAEE1C,EAAAC,EAAAC,cAAA,OAAKC,UAAW,OACdH,EAAAC,EAAAC,cAACyC,EAAD,CACA7B,MAAO,qBACPC,IAAK2B,KAAKpB,MAAMG,WAChBT,MAAO0B,KAAKpB,MAAMC,aAClBN,UAAWyB,KAAKpB,MAAML,YAGtBjB,EAAAC,EAAAC,cAAC0C,EAAD,KACGzB,EAAQ0B,IAAI,SAAAC,GAAM,OACjB9C,EAAAC,EAAAC,cAAC6C,EAAD,CACEnC,GAAIkC,EAAOlC,GACXoC,IAAKF,EAAOlC,GACZH,MAAOqC,EAAOrC,MACdE,aAAc8B,EAAK9B,0BAlFfsC,aCJlBC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.771410d6.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Card(props) {\n    return (\n      <div className=\"card\">\n        <div className=\"img-container\">\n          <img alt={props.name} src={props.image}\n              onClick={() => props.clickedChars(props.id)}>\n        </img>\n        </div>        \n        \n      </div>\n    );\n  }\n  \n  export default Card;","import React from \"react\";\nimport \"./style.css\";\n\nconst Navbar = props => (\n\n    <nav>\n        <span>{props.title}</span>\n        <span>{props.msg}</span>\n        <span>Score {props.score} | Top Score: {props.highScore}</span>\n    </nav>\n);\n\nexport default Navbar;","import React, { Component } from \"react\";\nimport Title from \"./components/Title\";\nimport Wrapper from \"./components/Wrapper\";\nimport Card from \"./components/Card\";\nimport Navbar from \"./components/Navbar\";\nimport friends from \"./friends.json\";\n\n\nconst maxScore = friends.length;\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    friends,\n    highScore: 0,\n    currentScore: 0,\n    clickedChar: [],\n    currentMsg: \"Start by clicking on a character\"\n  };\n\n  clickedChars = id => {\n    if (this.state.clickedChar.includes(id)) {\n      this.setState({currentMsg:\"WRONG!!!! You lose.\"})\n      this.resetGame()\n    }\n\n    else {\n      const score = this.state.currentScore + 1\n\n      if (score > this.state.highScore) {\n        this.setState({highScore:score})\n\n      }\n      if (score === maxScore) {\n        this.setState({currentMsg: \"You Won!!!\"})\n        this.resetGame()\n      }\n\n      else {\n        this.setState({currentMsg: \"Correct Guess!\"})\n        this.setState({clicked:this.state.clickedChar.push(id)})\n        this.setState({currentScore:score})\n        this.shuffleCards()\n      }\n    }\n  }\n\n  // removeFriend = id => {\n  //   // Filter this.state.friends for friends with an id not equal to the id being removed\n  //   const friends = this.state.friends.filter(friend => friend.id !== id);\n  //   // Set this.state.friends equal to the new friends array\n  //   this.setState({ friends });\n  // };\n\n\n  shuffleCards = () => {\n    const shuffledCards = this.shuffleArray(friends)\n    this.setState({friends:shuffledCards})\n  }\n\n  shuffleArray = (a) => {\n    for (let i = a.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n  }\n\n  resetGame = () => {\n    this.setState({currentScore:0})\n    this.setState({clickedChar:[]})\n    this.shuffleCards()\n  }\n\n\n  render() {\n    return (\n\n      <div className =\"App\">\n        <Navbar\n        title={\"Office Clicky Game\"}\n        msg={this.state.currentMsg}\n        score={this.state.currentScore}\n        highScore={this.state.highScore}\n        />\n        \n        <Wrapper>\n          {friends.map(friend => (\n            <Card\n              id={friend.id}\n              key={friend.id}\n              image={friend.image}\n              clickedChars={this.clickedChars}\n              />\n          ))}\n        </Wrapper>\n\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n//   render() {\n//     return (\n//       <Wrapper>\n//         <Title>The Office Clicky Game</Title>\n//         {this.state.friends.map(friend => (\n//           <Card\n            \n//             id={friend.id}\n//             key={friend.id}\n//             image={friend.image}\n//             clickedChars={this.clickedChars}\n//               />\n//         ))}\n        \n//       </Wrapper>\n//     );\n//   }\n// }\n\n\n\n// export default App;\n\n//NOTE: I had trouble with the logic for this assignment and I used outside help from the following:\n\n//https://www.geeksforgeeks.org/shuffle-a-given-array-using-fisher-yates-shuffle-algorithm/\n//https://github.com/vdelariva/clickygame\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}